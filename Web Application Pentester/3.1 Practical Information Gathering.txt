
--------------------------------

	Reconnaissance (Recon) Nedir ?

* Reconnaissance (kısaca Recon), bir sızma testi veya bug bounty programının başlangıç aşamasıdır. 
Bu aşamada ana amaç, hedef hakkında mümkün olduğunca fazla bilgi toplamaktır. 

--------------------------------

	Recon Türleri

1. Pasif Reconnaissance :
	* DNS sorguları: Alt alan adlarını ve ilişkili alan adlarını belirleme.
	* Whois sorgulamaları: Hedef hakkında kayıt bilgileri toplama.
	* Arama motoru sorguları: Google dorking tekniklerini kullanarak hassas bilgileri bulma.
	* Sosyal medya: Şirket profillerinden ve web sitelerinden bilgi toplama.

2. Aktif Reconnaissance :
	* Port taraması: Açık portları ve çalışan servisleri tespit etme.
	* Servis fingerprinting: Çalışan servislerin versiyonlarını belirleme.
	* Ağ haritalama: Ağ yapısını ve cihazları haritalandırma.

--------------------------------

	Recon İçin Yaygın Olarak Kullanılan Araçlar

* Nmap		: Ağ üzerinde cihazları ve servisleri keşfetmek için kullanılan güçlü bir ağ tarama aracı.
* Recon-ng	: Çevrimiçi kaynaklardan bilgi toplamak için modüler bir yapı sunan web reconnaissance çerçevesi.
* theHarvester	: E-posta adresleri, alt alan adları ve diğer bilgileri arama motorları ve sosyal ağlardan toplamak 
				için tasarlanmış bir araç.
* Shodan	: İnternet’e bağlı cihazları keşfetmek ve açık servisleri bulmak için kullanılan bir arama motoru.
* Sublist3r	: Çeşitli arama motorlarını kullanarak bir alan adının alt alan adlarını listeleyen bir araç.
* DNSenum	: DNS kayıtları ve alt alan adlarını toplamak için kullanılan bir DNS sorgulama aracı.
* Maltego	: Açık kaynak istihbarat ve adli analiz için kullanılan, veri ilişkilerini görselleştiren bir araç.

--------------------------------

	Directory Fuzzing Nedir ? (Dizin Bulanıklaştırma)

* Directory fuzzing, web uygulamalarında gizli veya yanlış yapılandırılmış dizinleri ve dosyaları bulmak için kullanılan bir 
tekniktir. Bu teknik, hedef URL üzerinde otomatik araçlarla farklı dizin adlarını denemeyi ve potansiyel olarak savunmasız 
ya da erişilemez yolları keşfetmeyi içerir.


	Nasıl Çalışır ?

* Directory Fuzzing, genellikle olası dizin ve dosya adlarının büyük bir listesini kullanarak ve bunları web uygulamasının 
URL'sine göre test ederek çalışır. Bir bulanıklaştırma aracı, listedeki her adı URL ile birleştirir ve yanıtı kontrol eder. 
200 OK, 403 Forbidden ve 404 Not Found gibi HTTP durum kodları izlenir. 200 OK yanıtı alınırsa, bir dizin veya dosyanın 
varlığını gösterebilir.

	Neler Tespit Edebilir ?

* Gizli admin panelleri
* Yedekleme dosyaları
* Yükleme dizinleri
* Hassas Bilgi Açıklığı

--------------------------------

	Popüler Directory Fuzzing Araçları

* DirBuster
* Gobuster
* ffuf (Fuzz Faster U Fool)
* WFuzz

--------------------------------

	dirb Tool (DirBuster)

- dirb http://10.0.1.3/
	> Default olarak bu url'in altında dizin araması yapar.

- dirb http://10.0.1.3/ -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -o sonuc.txt
	> verdiğimiz bu wordlist ile bu aramayı yapar.
	> -o : Çıktıyı dosya olarak kaydeder.

- dirb http://example.com -o sonuc.txt
	> Sonuçları kaydeder.

--------------------------------

	ffuf

* ffuf özellikleri :
	- Hız : Go dilinde yazıldığı için yüksek performans sağlar.
	- Farklı Fuzzing Modları : URL yolları, alt alan adları, parametreler ve başlıklar gibi çeşitli alanlarda fuzzing yapabilir.
	- Özelleştirilebilir Wordlistler : Kullanıcılar, hazır veya özel wordlistlerle URL veya parametre brute-forcing yapabilir.
	- Rekursiyon : ffuf, keşfedilen dizinlerdeki alt dizinleri otomatik olarak tarayabilir.
	- Esnek Çıktılar : JSON ve HTML gibi formatlarda çıktı alabilir.
	- Filtre ve Eşleşme Seçenekleri : Yanıt kodlarına, boyutlara veya içeriğe göre sonuçları filtreleyebilir.
	- HTTP Metot Desteği : GET, POST gibi HTTP metotları seçilebilir.
	- HTTPS ve Proxy Desteği : HTTPS istekleri destekler ve self-signed sertifikalarla çalışabilir. Proxy aracılığıyla anonimlik 
	sağlar.

* ffuf'un yüklenebilmesi için go'nun kurulu olması gerek
	- apt install golang

* ./ffuf -u "http://10.0.1.3/FUZZ" -w /usr/share/wordlists/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt
	- "../FUZZ" daki FUZZ bir yer tutucudur (değişken). Wordlistteki her kelimenin denenceği yerdir aslında

--------------------------------

	Discover Subdomains

* Subdomain, bir ana domainin (veya kök domainin) uzantısıdır ve genellikle bir web sitesinin farklı bölümlerini organize 
etmek için kullanılır. Örneğin, example.com domaini için blog.example.com veya shop.example.com gibi subdomainler kullanılabilir.


	Subdomain Keşfi

1. DNS Sorgulamalarıyla
	
	- Bu araçlar, hedef domainle ilişkili subdomainleri bulmak için DNS sunucularına sorgular gönderir ve 
	bu domainlere ait farklı kayıtları araştırır.
	- Araçlar : 
		> dnsenum 
		> dnsrecon
		> Fierce
	
2. Subdomain Brute Forcing

	- Bu yöntem, kelime listelerinden potansiyel subdomainler (örneğin admin.example.com, dev.example.com) oluşturarak hangi 
	subdomainlerin bir IP adresine çözündüğünü kontrol etmeye dayanır.
	- Araçlar : 
		> Sublist3r 
		> subbrute
		> amass

3. Sertifika Şeffaflık Kayıtları :

	- Sertifika şeffaflık kayıtları, güvenilen Sertifika Yetkilileri (CA) tarafından verilen tüm SSL/TLS sertifikalarını kaydeder. 
	Hedef domainle bağlantılı sertifikaları arayarak, bu sertifikalara dahil edilen subdomainleri keşfetmek mümkündür.
	- Araçlar :
		> crt.sh 
		> Censys 
		> CertSpotter

4. Web Arama Motorları

	- Araçlar : Google Dorks
	- Google üzerinden gelişmiş arama yapma.
		> Örnek : "site:vulnweb.com -wwww"

5. Pasif Keşif

	- Pasif araçlar, hedefin altyapısına doğrudan saldırmak yerine, kamuya açık veritabanları ve kaynaklar üzerinden bilgi toplar. 
	Bu kaynaklar genellikle geçmiş DNS verileri, web arşivleri, SSL sertifikaları gibi halk arasında erişilebilen verilerdir.
	- Araçlar : 
		> PassiveTotal
		> SecurityTrails
		> Shodan

--------------------------------

	crt.sh

* Web Browser'dan crt.sh sistesine gidip "testsparker.com" araması yaptıktan sonra karşımıza sundomainler çıkacaktır.

--------------------------------

	Discover Services: Nmap

* nmap -sS -sV -Pn -n --open 10.0.1.0/24

	-sS : SYN tarama, sadece SYN paketleri gönderir ve el sıkışmasını tamamlamaz. Böylece Firewall/IDS sistemleri atlanabilir.
	-sV : Servis ve Versiyonu tespit etmeye çalışır.
	-Pn : 
		> Normalde eğer port pinge cevap vermezse nmap onu atlar.
		> Eğer açıksa ve pinge kapalıysa biz onu kapalı olarak görürüz.
		> Bunun önüne geçmek için Ping atılmamasını sağlıyoruz. 
	-n  : 
		> nmap varsayılan olarak IP adresini DNS alan adına çevirmeye çalışır.
		> Ancak bununla birlikte DNS sorguları iptal eilmiş olur. Böylece daha hızlı tarar.
	--open :
		> Normalde nmap hem açık hem de kapalı portları gösterir.
		> Çıktıyı azaltmak için sadece açık portları göstermesini sağlıyoruz

--------------------------------

	Discover Technology  
	
	1. WhatWeb

* "whatweb" arcı ile birlikte app'lar tarafından kullanılan teknolojiler analiz edilebilir. 
	- whatweb -v http://example.com 
		-v : Verilen web sitesinin anlizini gerçekleştirir.

* Bu araç sitede kullanılan web sunucusu bilegileri, frameworkler, teknolojiler gibi pekv çok şey analiz edilebilir.

	
	2. Wappalyzer

* Web tarayıcısına eklenti olarak kurulabilie.

* Daha sonra bir web sitesi ziyaret edildiğinde bunu kullanarak bilgi toplanabilir. 

* Neler toplayabilir :
	- İçerik Yönetim Sistemleri (CMS) :  Joomla veya Drupal gibi CMS'leri tespit eder.
	- Programlama Dilleri
	- Web Frameworks
	- Javascript kütüphaneleri
	- Web Sunucuları
	- Analiz ve İzleyiciler : Google Analytics, Facebook Pixel veya reklam ağları gibi izleme araçlarını da gösterecektir.

--------------------------------

 	Dizin (Directory) Analizi ile Teknoloji Keşfi

* Bazı dizinler ve URL yapıları, uygulamanın hangi platformu veya CMS'yi kullandığını ele verebilir.

* Örnek Dizinler:

	- /wp-admin/ 					→ WordPress yönetici paneli
	- /wp-login.php 				→ WordPress giriş sayfası
	- /admin/ veya /administrator/ 	→ Genel yönetim panelleri
	- /drupal/ veya /user/ 			→ Drupal CMS
	- /index.php?option=com_ 		→ Joomla CMS
	- /cgi-bin/ 					→ Eski CGI betiklerinin bulunduğu alan
	 
--------------------------------

	 Giriş Noktaları Nedir ?

* Web uygulamalarında giriş noktaları, kullanıcıdan gelen verilerin işlendiği alanlardır. Bunlar ikiye ayrılır :
	
	1. Doğrudan girişler (Direct Inputs)	: Formlar, URL parametreleri gibi kullanıcıların doğrudan veri girdiği alanlardır.
	2. Dolaylı girişler (Indirect Inputs)	: Kullanıcıların farkında olmadan gönderdiği HTTP başlıkları (headers) 
											gibi veriler içerir.

--------------------------------

	HTTP Başlıklarının Önemi

* HTTP başlıkları (headers), istemci ile sunucu arasındaki isteklere eklenen meta bilgileri taşır. Güvenlik açıkları, 
bu başlıklar yeterince filtrelenmeden işlendiğinde ortaya çıkabilir. Örnek bazı başlıklar:
	
	- User-Agent: Tarayıcı ve işletim sistemi bilgilerini içerir.
	- Referer: Kullanıcının geldiği önceki URL bilgisini taşır.
	- Cookie: Kullanıcı tarayıcısında saklanan oturum bilgilerini içerebilir.

--------------------------------

	Enjeksiyon Saldırıları

1. SQL Injection (SQLi)
	* Bir saldırgan User-Agent başlığını değiştirebilir ve kötü amaçlı SQL komutları ekleyebilir. 
	* Örneğin :
		- User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)'; DROP TABLE users; -- 

2. Cross-Site Scripting (XSS)
	* Saldırgan Referer başlığına kötü amaçlı JavaScript kodu ekleyebilir
	* örneğin :
		- Referer: http://example.com'"><script>alert('XSS');</script>

3. Güvenlik Duvarlarını Atlatma
	* Bazı güvenlik sistemleri, belirli User-Agent başlıklarını filtreleyerek belirli istemcilerin erişimine izin verir. 
	Bir saldırgan, User-Agent’ı değiştirerek bu kısıtlamaları aşabilir.

4. İçerik Manipülasyonu
	* Bir uygulama, User-Agent başlığına göre farklı içerikler sunuyorsa, bir saldırgan bunu değiştirerek uygulamanın 
	beklenmedik yanıtlar vermesini sağlayabilir.

--------------------------------

