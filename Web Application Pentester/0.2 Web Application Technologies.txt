
----------------------------------------

	URL Syntax

* URL (Uniform Resource Locator - Tekdüzen Kaynak Konumlayıcı), bir kaynağa erişmek için kullanılır ve temelde üç soruya cevap verir :
	
	- Nasıl ?	: Talep edilen kaynağa erişmek için kullanılan yöntem ve protokol.
	- Nerede ?	: Talep edilen kaynağın bulunduğu adres.
	- Ne ?		: Erişmek istediğiniz veri ya da kaynak.


* scheme://user:password@host:port/path;params?query#frag
	
	- Scheme (Şema)
		> Kaynağa erişmek için kullanılan protokolü belirtir. 
		> Örnek: http, https, ftp
	
	- user:password (Kullanıcı adı ve şifre)
		> Sunucu tarafında tanımlanmış bir kaynağa erişmek için kullanılan kimlik bilgilerini belirtir. 
		> Örnek: user123:pass123@
	
	- host:port (Adres ve port)
		> Kaynağın bulunduğu adresi ve bağlantı için kullanılan portu ifade eder 
		> Örnek: www.example.com:8080
	
	- path (Yol)
		> Kaynağın sunucuda nerede saklandığını gösterir.
		> Örnek: /pub/prices.xls

	- params (Parametreler)
		> Bazı protokoller tarafından giriş parametrelerini tanımlamak için kullanılır.
		> Örnek: ;param1=value1

	- query (Sorgu)
		> Kaynak için sorgu parametrelerini içerir. ? işaretiyle başlar.
		> Örnek: ?id=123&sort=asc

	- frag (Parça):
		> Kaynağın belirli bir kısmını ifade eder. Bu, sunucuya gönderilmez, istemci tarafında kullanılır ve # karakteriyle ayrılır.
		> Örnek: #section2

----------------------------------------

	HTTP Request Structure

1. İstek Satırı (Request Line)

	* İstek satırı, üç temel bilgi içerir:
		- HTTP yöntemi	: İsteğin türünü belirtir. Örneğin: GET, POST, PUT, DELETE.
		- Kaynak		: Hangi kaynağın talep edildiğini belirtir. Örneğin: /example/resource.
		- HTTP sürümü	: Kullanılan HTTP protokolünün sürümünü belirtir. Örneğin: HTTP/1.1.

	* örnek :
		- GET /example/resource HTTP/1.1

2. İstek Başlıkları (Request Headers)

	* Başlıklar, istekle ilgili ek bilgiler sağlar. Tarayıcı, istemci türü, desteklenen içerik türleri gibi ayrıntılar 
	bu kısımda yer alır.

	* Örnek Başlıklar :
		Host: www.example.com  
		User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)  
		Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8

3. Boş Satır

	* Başlıklar ile isteğin gövdesi (body) arasında bir boş satır bulunur. Bu satır, başlıkların bittiğini ve 
	mesaj gövdesinin başladığını belirtir.

4. İstek Mesaj Gövdesi (Request Message Body)

	* Mesaj gövdesi, sunucuya gönderilecek verileri içerir. Gövde, yalnızca belirli HTTP yöntemlerinde kullanılır :
		- GET isteğinde genellikle boş olur.
		- POST isteğinde form verileri veya JSON gibi içerik yer alabilir.

	
---------------------------------------------

	HTTP Cevap (Response) Yapısı

1. Durum Satırı (Status Line)

	* Bu satır, sunucunun cevabını özetler:
		- HTTP sürümü	: Sunucunun kullandığı protokol sürümü.
		- Durum kodu	: İşlemin sonucunu belirtir (örneğin, 200 OK, 404 Not Found).
		- Durum mesajı	: Durum kodunun açıklaması.

	* örnek :
		- HTTP/1.1 200 OK


2. Cevap Başlıkları (Response Headers)

	* Sunucu hakkında bilgi veren ek ayrıntılar içerir. Örneğin:
		- Tarih (Date)		: Cevabın oluşturulduğu tarih ve saat.
		- Sunucu (Server)	: Sunucunun türü.
		- İçerik Türü (Content-Type): Dönen içeriğin formatı.

	* Örnek Başlıklar:
		Date: Tue, 17 Oct 2023 12:34:56 GMT  
		Server: Apache/2.4.41 (Unix)  
		Content-Type: text/html; charset=UTF-8

3. Boş Satır

	* Başlıkların sonunu ve mesaj gövdesinin başlangıcını belirtir.

4. Cevap Mesaj Gövdesi (Response Message Body)

	* Sunucunun istemciye gönderdiği gerçek içeriktir. Bu içerik şunları içerebilir:
		- HTML (bir web sayfası için)
		- JSON (bir API yanıtı için)
		- İkili veriler (resimler veya dosyalar için)

---------------------------------------------

	HTTP Yöntemleri

* HTTP, belirli bir kaynağa uygulanacak işlemi belirten bir dizi istek yöntemi tanımlar.

1. GET :
	- Sunucudan belirtilen kaynağın bir temsilini talep eder. 
	- Genellikle veri almak için kullanılır ve sunucuda herhangi bir yan etkiye yol açmamalıdır.

2 POST :
	- Veri göndermek için tasarlanmıştır, çoğunlukla form verisi göndermek için kullanılır. 
	- GET'ten daha güvenlidir çünkü veriler URL yerine istek gövdesinde gönderilir ve tarayıcı geçmişinde önbelleğe alınmaz.

3. HEAD :
	- GET isteği gibi çalışır, ancak kaynağın içeriğini talep etmez ve almaz. 
	- Gerçek veriyi iletmeden, bir kaynağın varlığını ve meta verilerini kontrol etmek için kullanılır.

4. OPTIONS :
	- Bir kaynağa ait iletişim seçenekleri hakkında bilgi talep eder. 
	- Bu yöntem, sunucunun hangi HTTP yöntemlerini desteklediğini anlamak için faydalıdır.

5. TRACE :
	- Tanılama amaçlı kullanılır, alınan isteği istemciye geri gönderir. 
	- Bu yöntem, isteğin aracı sistemler (örneğin proxy'ler) üzerinden nasıl dönüştüğünü anlamaya yardımcı olur.
	- Güvenlik nedeniyle genellikle devre dışı bırakılır.

6. PUT :
	- Sunucudan kaynağı güncellemesini veya eğer kaynağa ait bir şey yoksa, onu oluşturmasını ister. 
	- Genellikle belirtilen URL'deki mevcut kaynağın yerini almak için kullanılır.

7. DELETE :
	- Sunucudan belirtilen kaynağı silmesini talep eder. Bu yöntem, URL ile tanımlanan kaynağı silmek için kullanılır.

---------------------------------------------

	HTTP Durum Kodları

* HTTP durum kodları, HTTP isteklerinin sonuçlarıyla ilgili belirli anlamlar taşır. 

* Bu HTTP durum kodları üç hanelidir ve ilk rakama göre beş grup halinde kategorize edilir :
	- 1xx: Bilgilendirme 	(Informational)	-> Bilgi sağlar.
	- 2xx: Başarı 			(Success)		-> İsteğin başarılı olduğunu belirtir.
	- 3xx: Yönlendirme 		(Redirection)	-> İstemciye başka bir kaynağa yönlendirilmesi gerektiğini bildirir.
	- 4xx: İstemci Hatası 	(Client Error)	-> İstemcinin yaptığı istekle ilgili bir hata olduğunu belirtir.
	- 5xx: Sunucu Hatası 	(Server Error)	-> Sunucunun isteği yerine getirirken bir hata meydana geldiğini bildirir.


* Yaygın olarak karşılaşılan HTTP durum kodları :
	- 200 (OK) : 
		> HTTP isteği başarıyla yerine getirilmiştir.
	- 301 (Moved Permanently) : 
		> İstenilen kaynağın URI'si değiştirilmiştir. Yanıt genellikle yeni adresi içerir.
	- 302 (Found) : 
		> Hedef kaynak geçici olarak farklı bir URI altında bulunmaktadır. İstemci, etkili istek URI'sini kullanmaya devam etmelidir.
	- 400 (Bad Request) : 
		> İstemci hatası, genellikle hatalı sözdizimi veya geçersiz istek mesajı çerçevesi nedeniyle sunucunun, 
		isteği işleyememesi durumudur.
	- 401 (Unauthorized) : 
		> İstenilen kaynağa erişmek için geçerli kimlik bilgileri gerektiğini belirtir.
	- 403 (Forbidden) : 
		> Sunucu isteği anlar ancak yetersiz izinler nedeniyle yerine getirmez.
	- 404 (Not Found) : 
		> İstenilen kaynak sunucuda bulunmamaktadır.
	- 405 (Method Not Allowed) : 
		> İstekle kullanılan yöntem, sunucu tarafından tanınmaz veya yasaktır.
	- 500 (Internal Server Error) : 
		> Sunucu, isteği yerine getirmesini engelleyen beklenmedik bir durumla karşılaşmıştır.
	- 503 (Service Unavailable) : 
		> Sunucu, geçici aşırı yüklenme veya planlı bakım nedeniyle isteği işleyemiyor. Bir süre sonra tekrar kullanılabilir.

----------------------------------